image:
    # на этом VM-образе установлены все Visual Studio с 2008 по 2015
    - Visual Studio 2015
    - Ubuntu

init:
    # секция инициализации, исполняется до клонирования проекта
    # скорее всего, строчка ниже необязательна (так должно быть по умолчанию),
    # вместе с тем, она присутствует в официальных примерах, так что пусть будет:
    - git config --global core.autocrlf input

#clone_folder: c:\projects\my-prj # выбираем локальную директорию для клонирования
shallow_clone: true              # копируем только последний коммит, без истории (git clone --depth 1)

matrix:
    fast_finish: false           # не останавливаемся после возникновения ошибки в каком-то из заданий

platform:
    # будем гонять CI на amd64 и x86...
#    - x64
    - x86

# configuration:
#    # ... и в дебажной, и в релизной конфигурациях ...
#    - Debug
#    - Release

#environment:
#    matrix:
#        # ... на трёх студиях (2010, 2012, 2015)
#        - TOOLCHAIN: msvc10
#        - TOOLCHAIN: msvc12
#        - TOOLCHAIN: msvc14

install:
    # скрипт настройки среды и установки зависимостей:
    - cmd: call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
    - sh: sudo apt-get install -y ninja-build

before_build:
    - cmd: cmake -H. -Bbuild
    - sh: cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Release -G Ninja
    - sh: chmod +x test/*  # TODO выяснить куда исчезает флаг

build_script:
    # скрипт сборки проекта:
    - cmd: cmake --build build --config Release
    - cmd: 7z a testlab_win.zip %APPVEYOR_BUILD_FOLDER%\build\Release\testlab*.exe
    - sh: cmake --build build
    - sh: 7z a testlab_lnx.zip ${APPVEYOR_BUILD_FOLDER}/build/testlab*

test_script:
    # скрипт тестирования проекта:
    - cmd: cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --config Release --target RUN_TESTS
    - sh: cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test

artifacts:
    - path: testlab_win.zip
      name: TestLabForWindows
    - path: testlab_lnx.zip
      name: TestLabForLinux

#deploy:
#    # выкладываем tagged-коммиты на GitHub Releases:
#    description: '$(APPVEYOR_REPO_TAG_NAME)'
#    provider: GitHub
#
#    auth_token:
#        secure: <encrypted-github-token>
#
#    artifact: package_name
#    force_update: true
#
#    on:
#        appveyor_repo_tag: true
